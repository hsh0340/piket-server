name: piket-prod-cicd

# 트리거를 수행할 브랜치를 지정합니다.
on:
  push:
    branches: [ master ]

# 환경설정
env:
  DOCKER_IMAGE: ghcr.io/brandinglize/piket-server
  VERSION: ${{ github.sha }}
  NAME: piket-server

jobs:
  # 빌드 Job
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      # github repository에서 checkout
      - uses: actions/checkout@v2
      # docker build 수행
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # GitHub 컨테이너 레지스트리에 로그인 후 빌드 & 푸시
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: brandinglize
          password: ${{ secrets.GH_ACCESS_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
  # 배포 Job
  deploy:
    needs: build  # build 후에 실행되도록 정의
    name: Deploy
    runs-on: [ self-hosted, piket-server-label ] # AWS ./configure에서 사용할 label명
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: brandinglize
          password: ${{ secrets.GH_ACCESS_TOKEN }}
      - name: Create env
        run: |
          sudo rm -f .env
          touch .env
          echo DATABASE_URL=${{ secrets.DATABASE_URL_DEV }} >> .env
          echo ACCESS_TOKEN_EXPIRATION=${{ secrets.ACCESS_TOKEN_EXPIRATION }} >> .env
          echo REFRESH_TOKEN_EXPIRATION=${{ secrets.REFRESH_TOKEN_EXPIRATION }} >> .env
          echo JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} >> .env
          echo CACHE_HOST=${{ secrets.CACHE_HOST }} >> .env
          echo CACHE_PORT=${{ secrets.CACHE_PORT }} >> .env
          echo EMAIL_HOST=${{ secrets.EMAIL_HOST }} >> .env
          echo EMAIL_AUTH_USER=${{ secrets.EMAIL_AUTH_USER }} >> .env
          echo EMAIL_AUTH_PASSWORD=${{ secrets.EMAIL_AUTH_PASSWORD }} >> .env
          echo S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }} >> .env
          echo S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }} >> .env
          echo S3_REGION=${{ secrets.S3_REGION }} >> .env
          echo S3_BUCKET=${{ secrets.S3_BUCKET }} >> .env
          echo PORT=${{ secrets.PORT }} >> .env
          cat .env
      # 3000 -> 80 포트로 수행하도록 지정
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run --env-file ./.env -d -p 80:3000 --name piket-server --restart always ${{ env.DOCKER_IMAGE }}:latest